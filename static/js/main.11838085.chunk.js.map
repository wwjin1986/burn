{"version":3,"sources":["components/commons/NavBar.jsx","components/DailyCalories.jsx","components/Exercise.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","style","backgroundColor","id","Component","DailyCalories","tempDate","Date","currDate","getFullYear","getMonth","getDate","display","borderColor","href","type","color","aria-hidden","Exercise","state","exercise","calorie","console","log","this","fetch","method","mode","cache","credentials","headers","Content-Type","x-app-key","x-app-id","redirect","referrer","body","JSON","stringify","query","gender","weight_kg","height_cm","age","then","response","json","data","_this2","exercises","name","App","Fragment","commons_NavBar","components_DailyCalories","components_Exercise","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.11838085.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nclass NavBar extends Component {\n  render() {\n    return (\n      <nav\n        className=\"navbar navbar-expand-lg navbar-light\"\n        style={{ backgroundColor: \"#e3f2fd\" }}\n      >\n        <a className=\"navbar-brand\">Navbar</a>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item active\">\n              <a className=\"nav-link\">\n                Home <span className=\"sr-only\">(current)</span>\n              </a>\n            </li>\n            <li className=\"nav-item active\">\n              <a className=\"nav-link\">test</a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nclass DailyCalories extends Component {\n  render() {\n    const tempDate = new Date();\n    const date =\n      tempDate.getFullYear() +\n      \"-\" +\n      (tempDate.getMonth() + 1) +\n      \"-\" +\n      tempDate.getDate();\n    // \" \" +\n    // tempDate.getHours() +\n    // \":\" +\n    // tempDate.getMinutes() +\n    // \":\" +\n    // tempDate.getSeconds();\n    const currDate = date;\n\n    return (\n      <div className=\"Row\">\n        <div\n          className=\"card  mb-3 ml-5 mt-5\"\n          style={{\n            display: \"inline-block\",\n            borderColor: \"#9cd1f8\"\n          }}\n        >\n          <div className=\"card-header bg-transparent\">{currDate}</div>\n          <div className=\"card-body \">\n            <h5 className=\"card-title mr-2\" style={{ display: \"inline-block\" }}>\n              Walking 30 minutes : 100 Calorie\n            </h5>\n            <a\n              className=\"btn btn-danger btn-sm mb-2\"\n              href=\"#\"\n              style={{ display: \"inline-block\" }}\n            >\n              <i className=\"fa fa-trash-o fa-lg\" />\n            </a>\n          </div>\n\n          <div\n            className=\"card-footer bg-transparent\"\n            style={{ borderColor: \"#9cd1f8\" }}\n          >\n            <div style={{ display: \"inline-block\" }}>\n              <input\n                type=\"text\"\n                className=\"form-control form-control\"\n                style={{ borderColor: \"#9cd1f8\" }}\n                id=\"breakfast\"\n              />\n            </div>\n            <div style={{ display: \"inline-block\" }}>\n              <button\n                type=\"button\"\n                className=\"btn btn-sm ml-2\"\n                style={{ backgroundColor: \"#9cd1f8\", color: \"white\" }}\n              >\n                <i className=\"fa fa-plus\" aria-hidden=\"true\" />\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DailyCalories;\n","import React, { Component } from \"react\";\nclass Exercise extends Component {\n  state = {\n    exercise: \"run\",\n    calorie: 10\n  };\n  async componentDidMount() {\n    console.log(this.state.exercise);\n    await fetch(\"https://trackapi.nutritionix.com/v2/natural/exercise\", {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\", // no-cors, cors, *same-origin\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: \"same-origin\", // include, *same-origin, omit\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-app-key\": \"d1f7ab9e52b72ffdcace031cd9fb3e75\",\n        \"x-app-id\": \"04ca317f\"\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      redirect: \"follow\", // manual, *follow, error\n      referrer: \"no-referrer\", // no-referrer, *client\n      body: JSON.stringify({\n        query: \"walk 60 minutes\",\n        gender: \"female\",\n        weight_kg: 50,\n        height_cm: 160,\n        age: 33\n      }) // body data type must match \"Content-Type\" header\n    })\n      .then(response => response.json())\n      .then(data => {\n        this.state.exercise = data.exercises[0].name;\n        this.state.calorie = 10;\n      }); // parses JSON response into native Javascript objects\n    console.log(this.state.exercise);\n  }\n\n  render() {\n    return <div>{this.state.exercise}</div>;\n  }\n}\n\nexport default Exercise;\n","import React from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/commons/NavBar\";\nimport DailyCalories from \"./components/DailyCalories\";\nimport Exercise from \"./components/Exercise\";\nfunction App() {\n  return (\n    <React.Fragment>\n      <NavBar />\n      <DailyCalories />\n      <Exercise />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}